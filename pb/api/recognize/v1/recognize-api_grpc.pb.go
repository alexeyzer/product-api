// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package recognize_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecognizeApiServiceClient is the client API for RecognizeApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecognizeApiServiceClient interface {
	RecognizePhoto(ctx context.Context, in *RecognizePhotoRequest, opts ...grpc.CallOption) (*RecognizePhotoResponse, error)
}

type recognizeApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecognizeApiServiceClient(cc grpc.ClientConnInterface) RecognizeApiServiceClient {
	return &recognizeApiServiceClient{cc}
}

func (c *recognizeApiServiceClient) RecognizePhoto(ctx context.Context, in *RecognizePhotoRequest, opts ...grpc.CallOption) (*RecognizePhotoResponse, error) {
	out := new(RecognizePhotoResponse)
	err := c.cc.Invoke(ctx, "/recognize.api.RecognizeApiService/recognizePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecognizeApiServiceServer is the server API for RecognizeApiService service.
// All implementations must embed UnimplementedRecognizeApiServiceServer
// for forward compatibility
type RecognizeApiServiceServer interface {
	RecognizePhoto(context.Context, *RecognizePhotoRequest) (*RecognizePhotoResponse, error)
	mustEmbedUnimplementedRecognizeApiServiceServer()
}

// UnimplementedRecognizeApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecognizeApiServiceServer struct {
}

func (UnimplementedRecognizeApiServiceServer) RecognizePhoto(context.Context, *RecognizePhotoRequest) (*RecognizePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizePhoto not implemented")
}
func (UnimplementedRecognizeApiServiceServer) mustEmbedUnimplementedRecognizeApiServiceServer() {}

// UnsafeRecognizeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecognizeApiServiceServer will
// result in compilation errors.
type UnsafeRecognizeApiServiceServer interface {
	mustEmbedUnimplementedRecognizeApiServiceServer()
}

func RegisterRecognizeApiServiceServer(s grpc.ServiceRegistrar, srv RecognizeApiServiceServer) {
	s.RegisterService(&RecognizeApiService_ServiceDesc, srv)
}

func _RecognizeApiService_RecognizePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecognizeApiServiceServer).RecognizePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recognize.api.RecognizeApiService/recognizePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecognizeApiServiceServer).RecognizePhoto(ctx, req.(*RecognizePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecognizeApiService_ServiceDesc is the grpc.ServiceDesc for RecognizeApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecognizeApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recognize.api.RecognizeApiService",
	HandlerType: (*RecognizeApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "recognizePhoto",
			Handler:    _RecognizeApiService_RecognizePhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/recognize/v1/recognize-api.proto",
}
