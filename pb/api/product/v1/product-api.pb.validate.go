// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/product/v1/product-api.proto

package product

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteSizeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSizeRequestMultiError, or nil if none found.
func (m *DeleteSizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSizeRequestMultiError(errors)
	}
	return nil
}

// DeleteSizeRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSizeRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSizeRequestMultiError) AllErrors() []error { return m }

// DeleteSizeRequestValidationError is the validation error returned by
// DeleteSizeRequest.Validate if the designated constraints aren't met.
type DeleteSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSizeRequestValidationError) ErrorName() string {
	return "DeleteSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSizeRequestValidationError{}

// Validate checks the field values on ListSizesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSizesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSizesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSizesResponseMultiError, or nil if none found.
func (m *ListSizesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSizesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSizes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSizesResponseValidationError{
						field:  fmt.Sprintf("Sizes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSizesResponseValidationError{
						field:  fmt.Sprintf("Sizes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSizesResponseValidationError{
					field:  fmt.Sprintf("Sizes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSizesResponseMultiError(errors)
	}
	return nil
}

// ListSizesResponseMultiError is an error wrapping multiple validation errors
// returned by ListSizesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSizesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSizesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSizesResponseMultiError) AllErrors() []error { return m }

// ListSizesResponseValidationError is the validation error returned by
// ListSizesResponse.Validate if the designated constraints aren't met.
type ListSizesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSizesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSizesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSizesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSizesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSizesResponseValidationError) ErrorName() string {
	return "ListSizesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSizesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSizesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSizesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSizesResponseValidationError{}

// Validate checks the field values on CreateSizeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSizeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSizeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSizeRequestMultiError, or nil if none found.
func (m *CreateSizeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSizeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Category

	if len(errors) > 0 {
		return CreateSizeRequestMultiError(errors)
	}
	return nil
}

// CreateSizeRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSizeRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSizeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSizeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSizeRequestMultiError) AllErrors() []error { return m }

// CreateSizeRequestValidationError is the validation error returned by
// CreateSizeRequest.Validate if the designated constraints aren't met.
type CreateSizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSizeRequestValidationError) ErrorName() string {
	return "CreateSizeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSizeRequestValidationError{}

// Validate checks the field values on CreateSizeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSizeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSizeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSizeResponseMultiError, or nil if none found.
func (m *CreateSizeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSizeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Category

	if len(errors) > 0 {
		return CreateSizeResponseMultiError(errors)
	}
	return nil
}

// CreateSizeResponseMultiError is an error wrapping multiple validation errors
// returned by CreateSizeResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateSizeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSizeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSizeResponseMultiError) AllErrors() []error { return m }

// CreateSizeResponseValidationError is the validation error returned by
// CreateSizeResponse.Validate if the designated constraints aren't met.
type CreateSizeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSizeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSizeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSizeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSizeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSizeResponseValidationError) ErrorName() string {
	return "CreateSizeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSizeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSizeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSizeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSizeResponseValidationError{}

// Validate checks the field values on DeleteColorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteColorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteColorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteColorRequestMultiError, or nil if none found.
func (m *DeleteColorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteColorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteColorRequestMultiError(errors)
	}
	return nil
}

// DeleteColorRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteColorRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteColorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteColorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteColorRequestMultiError) AllErrors() []error { return m }

// DeleteColorRequestValidationError is the validation error returned by
// DeleteColorRequest.Validate if the designated constraints aren't met.
type DeleteColorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteColorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteColorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteColorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteColorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteColorRequestValidationError) ErrorName() string {
	return "DeleteColorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteColorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteColorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteColorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteColorRequestValidationError{}

// Validate checks the field values on ListColorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListColorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListColorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListColorsResponseMultiError, or nil if none found.
func (m *ListColorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListColorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListColorsResponseValidationError{
						field:  fmt.Sprintf("Colors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListColorsResponseValidationError{
						field:  fmt.Sprintf("Colors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListColorsResponseValidationError{
					field:  fmt.Sprintf("Colors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListColorsResponseMultiError(errors)
	}
	return nil
}

// ListColorsResponseMultiError is an error wrapping multiple validation errors
// returned by ListColorsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListColorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListColorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListColorsResponseMultiError) AllErrors() []error { return m }

// ListColorsResponseValidationError is the validation error returned by
// ListColorsResponse.Validate if the designated constraints aren't met.
type ListColorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColorsResponseValidationError) ErrorName() string {
	return "ListColorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListColorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColorsResponseValidationError{}

// Validate checks the field values on CreateColorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColorRequestMultiError, or nil if none found.
func (m *CreateColorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateColorRequestMultiError(errors)
	}
	return nil
}

// CreateColorRequestMultiError is an error wrapping multiple validation errors
// returned by CreateColorRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateColorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColorRequestMultiError) AllErrors() []error { return m }

// CreateColorRequestValidationError is the validation error returned by
// CreateColorRequest.Validate if the designated constraints aren't met.
type CreateColorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColorRequestValidationError) ErrorName() string {
	return "CreateColorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColorRequestValidationError{}

// Validate checks the field values on CreateColorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateColorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateColorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateColorResponseMultiError, or nil if none found.
func (m *CreateColorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateColorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateColorResponseMultiError(errors)
	}
	return nil
}

// CreateColorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateColorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateColorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateColorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateColorResponseMultiError) AllErrors() []error { return m }

// CreateColorResponseValidationError is the validation error returned by
// CreateColorResponse.Validate if the designated constraints aren't met.
type CreateColorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColorResponseValidationError) ErrorName() string {
	return "CreateColorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColorResponseValidationError{}

// Validate checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandRequestMultiError, or nil if none found.
func (m *DeleteBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBrandRequestMultiError(errors)
	}
	return nil
}

// DeleteBrandRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandRequestMultiError) AllErrors() []error { return m }

// DeleteBrandRequestValidationError is the validation error returned by
// DeleteBrandRequest.Validate if the designated constraints aren't met.
type DeleteBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandRequestValidationError) ErrorName() string {
	return "DeleteBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandRequestValidationError{}

// Validate checks the field values on ListBrandsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBrandsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrandsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBrandsResponseMultiError, or nil if none found.
func (m *ListBrandsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrandsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBrandGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBrandsResponseValidationError{
						field:  fmt.Sprintf("BrandGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBrandsResponseValidationError{
						field:  fmt.Sprintf("BrandGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBrandsResponseValidationError{
					field:  fmt.Sprintf("BrandGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBrandsResponseMultiError(errors)
	}
	return nil
}

// ListBrandsResponseMultiError is an error wrapping multiple validation errors
// returned by ListBrandsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListBrandsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrandsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrandsResponseMultiError) AllErrors() []error { return m }

// ListBrandsResponseValidationError is the validation error returned by
// ListBrandsResponse.Validate if the designated constraints aren't met.
type ListBrandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandsResponseValidationError) ErrorName() string {
	return "ListBrandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBrandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandsResponseValidationError{}

// Validate checks the field values on GetBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandRequestMultiError, or nil if none found.
func (m *GetBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBrandRequestMultiError(errors)
	}
	return nil
}

// GetBrandRequestMultiError is an error wrapping multiple validation errors
// returned by GetBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandRequestMultiError) AllErrors() []error { return m }

// GetBrandRequestValidationError is the validation error returned by
// GetBrandRequest.Validate if the designated constraints aren't met.
type GetBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandRequestValidationError) ErrorName() string { return "GetBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandRequestValidationError{}

// Validate checks the field values on GetBrandResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandResponseMultiError, or nil if none found.
func (m *GetBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return GetBrandResponseMultiError(errors)
	}
	return nil
}

// GetBrandResponseMultiError is an error wrapping multiple validation errors
// returned by GetBrandResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandResponseMultiError) AllErrors() []error { return m }

// GetBrandResponseValidationError is the validation error returned by
// GetBrandResponse.Validate if the designated constraints aren't met.
type GetBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandResponseValidationError) ErrorName() string { return "GetBrandResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandResponseValidationError{}

// Validate checks the field values on CreateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandResponseMultiError, or nil if none found.
func (m *CreateBrandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ImageUrl

	if len(errors) > 0 {
		return CreateBrandResponseMultiError(errors)
	}
	return nil
}

// CreateBrandResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBrandResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBrandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandResponseMultiError) AllErrors() []error { return m }

// CreateBrandResponseValidationError is the validation error returned by
// CreateBrandResponse.Validate if the designated constraints aren't met.
type CreateBrandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandResponseValidationError) ErrorName() string {
	return "CreateBrandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandResponseValidationError{}

// Validate checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandRequestMultiError, or nil if none found.
func (m *CreateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for File

	// no validation rules for FileExtension

	if len(errors) > 0 {
		return CreateBrandRequestMultiError(errors)
	}
	return nil
}

// CreateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandRequestMultiError) AllErrors() []error { return m }

// CreateBrandRequestValidationError is the validation error returned by
// CreateBrandRequest.Validate if the designated constraints aren't met.
type CreateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandRequestValidationError) ErrorName() string {
	return "CreateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandRequestValidationError{}

// Validate checks the field values on ListCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoryResponseMultiError, or nil if none found.
func (m *ListCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoryResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoryResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoryResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCategoryResponseMultiError(errors)
	}
	return nil
}

// ListCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoryResponseMultiError) AllErrors() []error { return m }

// ListCategoryResponseValidationError is the validation error returned by
// ListCategoryResponse.Validate if the designated constraints aren't met.
type ListCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoryResponseValidationError) ErrorName() string {
	return "ListCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoryResponseValidationError{}

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CategoryValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CategoryValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}
	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on ListCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoryRequestMultiError, or nil if none found.
func (m *ListCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCategoryRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCategoryRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCategoryRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCategoryRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCategoryRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCategoryRequestValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLevel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCategoryRequestValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCategoryRequestValidationError{
					field:  "Level",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLevel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCategoryRequestValidationError{
				field:  "Level",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCategoryRequestMultiError(errors)
	}
	return nil
}

// ListCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoryRequestMultiError) AllErrors() []error { return m }

// ListCategoryRequestValidationError is the validation error returned by
// ListCategoryRequest.Validate if the designated constraints aren't met.
type ListCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoryRequestValidationError) ErrorName() string {
	return "ListCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoryRequestValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Page) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Page with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PageMultiError, or nil if none found.
func (m *Page) ValidateAll() error {
	return m.validate(true)
}

func (m *Page) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Limit

	if len(errors) > 0 {
		return PageMultiError(errors)
	}
	return nil
}

// PageMultiError is an error wrapping multiple validation errors returned by
// Page.ValidateAll() if the designated constraints aren't met.
type PageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageMultiError) AllErrors() []error { return m }

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryResponseMultiError, or nil if none found.
func (m *GetCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryResponseValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryResponseValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryResponseMultiError(errors)
	}
	return nil
}

// GetCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryResponseMultiError) AllErrors() []error { return m }

// GetCategoryResponseValidationError is the validation error returned by
// GetCategoryResponse.Validate if the designated constraints aren't met.
type GetCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryResponseValidationError) ErrorName() string {
	return "GetCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryResponseValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}
	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryRequestValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryRequestValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryRequestValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}
	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCategoryResponseValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCategoryResponseValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}
	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}
	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryRequestValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryRequestValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryRequestValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}
	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryResponseMultiError, or nil if none found.
func (m *CreateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Level

	if all {
		switch v := interface{}(m.GetParentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryResponseValidationError{
					field:  "ParentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryResponseValidationError{
				field:  "ParentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryResponseMultiError(errors)
	}
	return nil
}

// CreateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryResponseMultiError) AllErrors() []error { return m }

// CreateCategoryResponseValidationError is the validation error returned by
// CreateCategoryResponse.Validate if the designated constraints aren't met.
type CreateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryResponseValidationError) ErrorName() string {
	return "CreateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryResponseValidationError{}

// Validate checks the field values on EchoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EchoRequestMultiError, or
// nil if none found.
func (m *EchoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EchoRequestMultiError(errors)
	}
	return nil
}

// EchoRequestMultiError is an error wrapping multiple validation errors
// returned by EchoRequest.ValidateAll() if the designated constraints aren't met.
type EchoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoRequestMultiError) AllErrors() []error { return m }

// EchoRequestValidationError is the validation error returned by
// EchoRequest.Validate if the designated constraints aren't met.
type EchoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoRequestValidationError) ErrorName() string { return "EchoRequestValidationError" }

// Error satisfies the builtin error interface
func (e EchoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoRequestValidationError{}

// Validate checks the field values on EchoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EchoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EchoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EchoResponseMultiError, or
// nil if none found.
func (m *EchoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EchoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EchoResponseMultiError(errors)
	}
	return nil
}

// EchoResponseMultiError is an error wrapping multiple validation errors
// returned by EchoResponse.ValidateAll() if the designated constraints aren't met.
type EchoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EchoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EchoResponseMultiError) AllErrors() []error { return m }

// EchoResponseValidationError is the validation error returned by
// EchoResponse.Validate if the designated constraints aren't met.
type EchoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EchoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EchoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EchoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EchoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EchoResponseValidationError) ErrorName() string { return "EchoResponseValidationError" }

// Error satisfies the builtin error interface
func (e EchoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEchoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EchoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EchoResponseValidationError{}

// Validate checks the field values on ListBrandsResponse_BrandGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBrandsResponse_BrandGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrandsResponse_BrandGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBrandsResponse_BrandGroupMultiError, or nil if none found.
func (m *ListBrandsResponse_BrandGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrandsResponse_BrandGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupName

	for idx, item := range m.GetBrands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBrandsResponse_BrandGroupValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBrandsResponse_BrandGroupValidationError{
						field:  fmt.Sprintf("Brands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBrandsResponse_BrandGroupValidationError{
					field:  fmt.Sprintf("Brands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBrandsResponse_BrandGroupMultiError(errors)
	}
	return nil
}

// ListBrandsResponse_BrandGroupMultiError is an error wrapping multiple
// validation errors returned by ListBrandsResponse_BrandGroup.ValidateAll()
// if the designated constraints aren't met.
type ListBrandsResponse_BrandGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrandsResponse_BrandGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrandsResponse_BrandGroupMultiError) AllErrors() []error { return m }

// ListBrandsResponse_BrandGroupValidationError is the validation error
// returned by ListBrandsResponse_BrandGroup.Validate if the designated
// constraints aren't met.
type ListBrandsResponse_BrandGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandsResponse_BrandGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandsResponse_BrandGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandsResponse_BrandGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandsResponse_BrandGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandsResponse_BrandGroupValidationError) ErrorName() string {
	return "ListBrandsResponse_BrandGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListBrandsResponse_BrandGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandsResponse_BrandGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandsResponse_BrandGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandsResponse_BrandGroupValidationError{}
